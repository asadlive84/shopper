
services:
  # User Service (gRPC)
  user-service:
    build:
      context: ./user-svc
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
      - "9091:9091"
    environment:
      - GRPC_PORT=:50051
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBITMQ_QUEUE=user_tasks
      - RABBITMQ_EXCHANGE=user_exchange
      - POSTGRES_DSN=host=postgres user=postgres password=postgres dbname=userdb port=5432 sslmode=disable
      - MONGODB_URI=mongodb://mongodb:27017
      - MONGODB_DATABASE=userdb
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_started
      jaeger:
        condition: service_started
    networks:
      - app-network

  # API Gateway (HTTP)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"    # HTTP port
      - "9092:9092"    # Prometheus metrics
    environment:
      - HTTP_PORT=:8080
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBITMQ_QUEUE=user_tasks
      - RABBITMQ_EXCHANGE=user_exchange
      - GRPC_USER_SERVICE_ADDR=user-service:50051
    depends_on:
      user-service:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - app-network

  # PostgreSQL
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=userdb
    ports:
      - "5438:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB
  mongodb:
    image: mongo:5
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  # Jaeger (Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"  # Agent
      - "14268:14268"    # Collector
      - "16686:16686"    # UI
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - app-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"  # Prometheus UI
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  mongo-data:
  rabbitmq-data:
